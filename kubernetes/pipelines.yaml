---
apiVersion: v1
kind: Namespace
metadata:
  name: website-pipeline
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: s2i-deploy-git-html
spec:
  params:
    - name: gitRepo
      type: string
      description: |
        The url of the public git repo to clone containing the HTML website
    - name: gitSiteDir
      type: string
      default: "./"
      description: |
        The directory within the gitRepo to use as a context-dir which contains the HTML site
    - name: siteName
      type: string
      description: |
        The name of the site to deploy
    - name: siteDomain
      type: string
      description: |
        The domain which the site is deployed to 
    - name: siteNamespace
      type: string
      description: |
        The namespace where the site containers lives for the site to deploy
    - name: siteHostname
      type: string
      description: |
        The hostname of the site to deploy
  steps:
    - name: s2i-deploy-git-docker
      image: registry.redhat.io/openshift4/ose-cli@sha256:0d21299d2adfa3cb74562c4dffbedd3b107fffac3a2a537f14770088abd4671f
      script: |
        #!/usr/bin/env bash
        set -e

        echo "installing git..."
        yum install -y git

        echo "debugging..."
        echo "gitRepo:       $(params.gitRepo)"
        echo "gitSiteDir:    $(params.gitSiteDir)"
        echo "siteName:      $(params.siteName)"
        echo "siteDomain:    $(params.siteDomain)"
        echo "siteNamespace: $(params.siteNamespace)"
        echo "siteHostname:  $(params.siteHostname)"

        exit 0

        echo "using namespace '$(params.siteNamespace)'..."
        oc project $(params.siteNamespace)

        if [ -z `oc get pods --no-headers -l deployment=$(params.siteName) -o name` ]; then
          echo "deploying site for first time '$(params.siteName)'..."

          echo "creating service account '$(params.siteName)'..."
          oc create serviceaccount $(params.siteName)

          echo "deploying site '$(params.siteName)'"
          oc new-app nginx:1.20-ubi9~$(params.gitRepo) \
            --name=$(params.siteName) \
            --context-dir=$(params.gitSiteDir)

          echo "update service account '$(params.siteName)' for app '$(params.siteName)'..."
          oc set serviceaccount deployment $(params.siteName) $(params.siteName)

          echo "exposing app '$(params.siteName)' using hostname '$(params.siteHostname)'..."
          #oc expose svc/$(params.siteName) --hostname=$(params.siteHostname)
          cat <<EOF | oc create -f -
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: $(params.siteName)
            annotations:
              cert-manager.io/issuer-name: public
              cert-manager.io/issuer-kind: ClusterIssuer
          spec:
            host: $(params.siteHostname)
            port:
              targetPort: 8080-tcp
            to:
              kind: Service
              name: $(params.siteName)
              weight: 100
            tls:
              termination: edge
              insecureEdgeTerminationPolicy: Redirect
            wildcardPolicy: None
        EOF

        else
          echo "deploying new revision of app '$(params.siteName)'..."
          oc start-build $(params.siteName) -w
        fi
  stepTemplate:
    securityContext:
      runAsGroup: 0
---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: html-cd
  namespace: website-pipeline
spec:
  params:
    - name: gitRepo
      type: string
      description: |
        The url of the public git repo to clone containing the HTML website
    - name: gitSiteDir
      type: string
      default: "./"
      description: |
        The directory within the gitRepo to use as a context-dir which contains the HTML site
    - name: siteName
      type: string
      description: |
        The name of the site to deploy
    - name: siteNamespace
      type: string
      description: |
        The namespace where the site containers lives for the site to deploy
    - name: siteHostname
      type: string
      description: |
        The hostname of the site to deploy
  tasks:
    #
    # deploy
    #
    - name: deploy-s2i
      params:
        - name: gitRepo
          value: "$(params.gitRepo)"
        - name: gitSiteDir
          value: "$(params.gitSiteDir)"
        - name: siteName
          value: "$(params.siteName)"
        - name: siteNamespace
          value: "$(params.siteNamespace)"
        - name: siteHostname
          value: "$(params.siteHostname)"
      taskRef:
        kind: ClusterTask
        name: s2i-deploy-git-html
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: html-cd
  namespace: website-pipeline
spec:
  params:
    - name: gitRepo
    - name: gitSiteDir
    - name: siteName
    - name: siteNamespace
    - name: siteHostname
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        generateName: html-cd-
        namespace: website
      spec:
        pipelineRef:
          name: html-cd
        params:
          - name: gitRepo
            value: "$(tt.params.gitRepo)"
          - name: gitSiteDir
            value: "$(tt.params.gitSiteDir)"
          - name: siteName
            value: "$(tt.params.siteName)"
          - name: siteNamespace
            value: "$(tt.params.siteNamespace)"
          - name: siteHostname
            value: "$(tt.params.siteHostname)"
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: github
  namespace: website-pipeline
spec:
  params:
    - name: gitRepo
      value: "$(body.repository.clone_url)"
    - name: gitSiteDir
      value: "io.dustinscott.apps.site1"
    - name: siteName
      value: "site1"
    - name: siteNamespace
      value: "site1"
    - name: siteHostname
      value: "site1.apps.dustinscott.io"
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: github
  namespace: website-pipeline
spec:
  serviceAccountName: pipeline
  triggers:
    - name: html-cd
      interceptors:
        - ref:
            name: github
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev/v1alpha1
      bindings:
        - ref: github
      template:
        ref: html-cd
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app.kubernetes.io/managed-by: EventListener
    app.kubernetes.io/part-of: Triggers
    eventlistener: github
  annotations:
    cert-manager.io/issuer-name: public
    cert-manager.io/issuer-kind: ClusterIssuer
  name: github
  namespace: website-pipeline
spec:
  host: github.apps.azure.dustinscott.io
  port:
    targetPort: http-listener
  tls:
    termination: edge
  to:
    kind: Service
    name: el-github
